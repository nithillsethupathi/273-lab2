datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  family = 4
  previewFeatures = ["mongoDb"]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  shop          Shop[]
  store         Store[]
  sessions      Session[]
  favorites     Favorites[]
  cart          Cart[]
  orders        Orders[]
}

model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Favorites {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  userId    String
  productId String
  title     String
  price     Float
  image     String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  userId    String
  productId String
  title     String
  price     Float
  image     String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Orders {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  email       String
  userId      String
  orderNumber Int
  productId   String
  title       String
  image       String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderNumber {
  orderNumber String @id @default(auto()) @map("_id") @db.ObjectId
}

model Shop {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String @unique
  email  String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Store {
  productId   String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  email       String
  image       String
  category    String
  price       String
  description String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

